# General Commands  
# They can be executed locally or remotely.  
# (C) 2022 Ignacio Cea Fornies  
;AUTHOR  
Returns information about the author.  
Parameters: None.
;RESTART YES|NO [LEVEL]  
Restarts the computer.  
Parameters:  
=> YES|NO (mandatory): Indicates whether to restart or not.  
=> [LEVEL] (optional): Defines the restart level.  
  => 0: Restart CPU only.  
  => 1: Restart computer without clearing memory.  
  => >1: Full restart (CPU, memory, devices).  
Notes: Implementation of levels may depend on the computer.  
;STATUS  
Displays the contents of the Status Register.  
Parameters: None. 
;REGISTERS  
Displays the current values of all CPU registers.  
Parameters: None. 
;CHANGEREG REGNAME VALUE  
Changes the value of a specific register.  
Parameters:  
=> REGNAME (madatory): Name of the register.  
=> VALUE (mandatory): New value (decimal by default, binary prefix z, octal prefix o, hex prefix $).  
;PC
Displays the current Program Counter value.  
Parameters: None. 
;SETPC PC  
Sets the Program Counter to a new value.  
Parameters:  
=> PC (mandatory): New address.  
Notes: Improper use may break the simulation.  
;INTERRUPTS  
Displays the status of all interrupts managed by the system.  
Parameters: None. 
;INTSET ID|ALL ON|OFF  
Enables or disables interrupts.  
Parameters:  
=> ID (mandatory): Interrupt identifier, or ALL for all.  
=> ON|OFF (mandatory): Action to perform.  
Notes: If the interrupt does not exist, an error will be generated.  
;DEBUGON FILENAME YES|NO [YES|NO] [ALLDIR|D:DIR1-DIR2] [ALLCHIP|C:CHIPID1 CHIPID2 ...] [ALLIO|I:DEVICEID1 DEVICEID2 ...] [ALLMEM|M:MEMID1 MEMID2 ...]  
Enables deep debugging of the computer.  
Parameters:  
=> FILENAME (mandatory): Path of the output file.  
=> YES|NO (mandatory): Trace CPU execution (NO overwrites file, YES appends).  
=> [YES|NO] (optional): Whether to append if the file exists.  
=> [D:DIR1-DIR2] (optional): Limit tracing to an address range.  
=> [ALLCHIP|C:...] (optional): Chips to trace.  
=> [ALLIO|I:...] (optional): Devices to trace.  
=> [ALLMEM|M:...] (optional): Memory units to trace.  
Notes: Cannot be used if interrupt debugging is active.  
;DEBUGOFF  
Disables deep debugging.  
Parameters: None. 
Notes: Cannot be used if interrupt debugging is active.  
;IDEBUGON FILENAME [YES|NO]  
Enables debugging of interrupts only.  
Parameters:  
=> FILENAME (mandatory): Path of the output file.  
=> [YES|NO] (optional): Append (YES) or overwrite (NO, default).  
Notes: Cannot be used if deep debugging is active.  
;IDEBUGOFF  
Disables interrupt debugging.  
Parameters: None. 
Notes: Cannot be used if deep debugging is active.  
;CPUSTATUS  
Displays CPU status: registers, status register, program counter, and stack.  
Parameters: None. 
;CPUSSTATUS  
Displays CPU status without stack information.  
Parameters: None. 
;CPUSTATE  
Displays the current state of the CPU and additional data.  
Parameters: None. 
;CLOCKFACTOR VALUE  
Changes the CPU speed factor.  
Parameters:  
=> VALUE (mandatory): Factor (1 = normal speed).  
;DEVICES [ID1 ID2 ...]  
Displays information about connected devices.  
Parameters:  
=> None: Show all devices.  
=> [ID1 ID2 ...] (optional): Show specific devices.  
;PERIPHERALS [ID1 ID2 ...]  
Displays information about connected peripherals.  
Parameters:  
=> None: Show all peripherals.  
=> [ID1 ID2 ...] (optional): Show specific ones.  
;PERCOMMAND PERID CMDID [ATTRS]  
Sends a command to a peripheral.  
Parameters:  
=> PERID (mandatory): Peripheral ID.  
=> CMDID (mandatory): Command ID.  
=> [ATTRS] (optional): Optional attributes required by the command.  
;STACK [ALL]  
Displays stack status.  
Parameters:  
=> None: Show basic info.  
=> [ALL] (optional): Show content (hexadecimal, no prefix).  
;CPUINFO  
Displays detailed CPU information.  
Parameters: None. 
;MEMORY INITIAL [FINAL]  
Displays memory contents.  
Parameters:  
=> INITIAL (mandatory): Start address.  
=> [FINAL] (optional): End address (optional).  
Notes: Addresses may be decimal, binary (z), octal (o), or hex ($). Contents shown in hex (no prefix).  
;MEMORYDUMP INITIAL FINAL  
Displays a full dump of memory between two addresses.  
Parameters:  
=> INITIAL (mandatory): Start address.  
=> FINAL (mandatory): End address.  
Notes: Shows RAM and ROM, active or inactive.  
;MEMORYSTR [ALL]  
Displays the memory structure.  
Parameters:  
=> None: Show only active memory regions.
=> [ALL] (optional): Show all regions.  
;SETMEMORY INITIAL [FINAL] VALUE  
Sets memory contents to a value.  
Parameters:  
=> INITIAL (mandatory): Start address.  
=> [FINAL] (optional): End address (optional).  
=> VALUE (mandatory): Data to write.  
Notes: Be careful â€” may crash the simulation. If value >1 byte, step equals its length.  
;ASSIGNJOY ID NEWID  
Changes joystick identification number.  
Parameters:  
=> ID (mandatory): Current joystick ID.  
=> NEWID (optional): New assigned ID.  
;SOUNDON  
Enables sound.  
Parameters: None. 
;SOUNDOFF  
Disables sound.  
Parameters: None. 
;CRTON  
Enables CRT screen effect.  
Parameters: None. 
;CRTOFF  
Disables CRT screen effect.  
Parameters: None. 
;STOP  
Stops CPU execution.  
Parameters: None. 
;RUN [ADDRESS]  
Starts or resumes CPU execution.  
Parameters:  
=> None: Resume from current PC.  
=> [ADDRESS] (optional): Start from a new address.  
Notes: Changes PC before execution. Alias: R.  
;NEXT  
Executes the next instruction.  
Parameters: None. 
Notes: Alias = N.  
;NEXTSTACK  
Executes instructions until the stack pointer returns to its initial position.  
Parameters: None.
Notes: Useful to skip routines. Behavior may vary by CPU (e.g., ZX81 stack usage). Alias: NS.  
;SHOWNEXT [NUMBER]  
Displays the next instruction(s) to be executed.  
Parameters:  
=> None: Show only the next one.  
=> [NUMBER] (optional): Number of instructions to display.  
Notes: Alias = SN.  
;INST  
Displays the last instruction executed.  
Parameters: None.
;BREAKS  
Displays the list of breakpoints.  
Parameters: None. 
Notes: Breakpoint addresses shown in hex (no prefix).  
;SETBREAK ADDR1 [ADDR2 ...]  
Sets one or more breakpoints.  
Parameters:  
=> ADDR1 (mandatory): At least one address.
=> [ADDR2 ...] (optional): More addresses (decimal, binary, octal, or hex).  
;REMOVEBREAK ADDR1 [ADDR2 ...]  
Removes one or more breakpoints.  
Parameters:  
=> ADDR1 (mandatory): At leat one address.
=> [ADDR2 ...] (optional): More addresses. (decimal, binary, octal, or hex).
;REMOVEBREAKS  
Removes all breakpoints.  
Parameters: None. 
;SPEED  
Displays the real CPU execution speed.  
Parameters: None. 
Notes: Also shows screen I/O speed.  
;LOADPRG PRG  
Loads a program into memory.  
Parameters:  
=> PRG (mandatory): Program filename.  
Notes: May cause a crash. Use RUN ADDRESS to start.  
;LOADBIN PRG ADDRESS  
Loads binary data into memory at a specific address.  
Parameters:  
=> PRG (mandatory): Binary file.  
=> ADDRESS (mandatory): Load address.  
;SAVEBIN FILE SIZE ADDRESS  
Saves memory content into a binary file.  
Parameters:  
=> FILE (mandatory): Output filename.  
=> SIZE (mandatory): Number of bytes.  
=> ADDRESS (mandatory): Start address.  
;DATASETTE  
Displays the status of the datasette (if connected and supported).  
Parameters: None. 
;GRIDON COLOR  
Enables a grid overlay on the screen.  
Parameters:  
=> COLOR (mandatory): Grid color.  
;GRIDOFF  
Disables the grid overlay on the screen.  
Parameters: None. 
;PICTURE FILENAME  
Takes a screenshot of the emulator screen.  
Parameters:  
=> FILENAME (mandatory): Output file name (supported formats: PNG, JPG, BMP).  
Notes: Any unsupported format will fail.